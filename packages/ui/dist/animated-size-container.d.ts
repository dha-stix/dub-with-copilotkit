import * as framer_motion from 'framer-motion';
import * as react from 'react';

/**
 * A container with animated width and height (each optional) based on children dimensions
 */
declare const AnimatedSizeContainer: react.ForwardRefExoticComponent<{
    width?: boolean | undefined;
    height?: boolean | undefined;
} & {
    children?: react.ReactNode;
} & Omit<Omit<{
    slot?: string | undefined;
    title?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    tw?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnterCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeaveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & framer_motion.MotionProps & react.RefAttributes<HTMLDivElement>, "ref">, "animate" | "children"> & react.RefAttributes<HTMLDivElement>>;

export { AnimatedSizeContainer };
